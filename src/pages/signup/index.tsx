import Head from "next/head";
import { useState } from "react";
import { auth } from "../../firebase";
import {
  createUserWithEmailAndPassword,
  sendEmailVerification,
  updateProfile,
} from "firebase/auth";

import { Button, Checkbox, Form, Input } from "antd";
import React from "react";
import { useRouter } from "next/router";

const SignUp = () => {
  const [errorResponse, setErrorResponse] = useState("");
  const [notification, setNotificaiton] = useState("");
  const router = useRouter();

  const handleError = (error: string) => {
    setErrorResponse(error);
    setTimeout(function () {
      setErrorResponse("");
    }, 5000);
  };
  const onFinish = (values: any) => {
    console.log("Success:", values);
  };

  const onFinishFailed = (errorInfo: any) => {
    console.log("Failed:", errorInfo);
  };

  interface RegisterParams {
    username: string;
    email: string;
    password: string;
  }

  const register = async (values: RegisterParams) => {
    const { username, email, password } = values;
    console.log("----name---", username);
    createUserWithEmailAndPassword(auth, email, password)
      .then((userCredential) => {
        const user = userCredential.user;
        updateProfile(user, {
          displayName: username,
        });
        // firebase auth doesn't check for verification status
        sendEmailVerification(userCredential.user);
        setNotificaiton("Verification email has been sent");
      })
      .catch((err) => {
        switch (err.code) {
          case "auth/quota-exceeded":
            handleError("Exceeded daily quota for email sign-in");
            break;
          case "auth/email-already-in-use":
            handleError("Email already in use");
            break;
          default:
            handleError("An unknown error has occured");
        }

        // ..
      });
  };

  return (
    <>
      <Head>
        <title>Create an account</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="main">
        <div className="flex-container">
          <h1>Create an account</h1>
          <Form
            name="basic"
            labelCol={{ span: 8 }}
            wrapperCol={{ span: 16 }}
            style={{ maxWidth: 600 }}
            initialValues={{ remember: true }}
            onFinish={register}
            onFinishFailed={onFinishFailed}
            autoComplete="off"
          >
            <Form.Item
              label="Username"
              name="username"
              rules={[
                { required: true, message: "Please input your username!" },
              ]}
            >
              <Input />
            </Form.Item>
            <Form.Item
              label="Email"
              name="email"
              rules={[
                { required: true, message: "Please input your username!" },
              ]}
            >
              <Input />
            </Form.Item>

            <Form.Item
              label="Password"
              name="password"
              rules={[
                { required: true, message: "Please input your password!" },
              ]}
            >
              <Input.Password />
            </Form.Item>

            <Form.Item
              name="remember"
              valuePropName="checked"
              wrapperCol={{ offset: 8, span: 16 }}
            >
              <Checkbox>Remember me</Checkbox>
            </Form.Item>

            <Form.Item wrapperCol={{ offset: 8, span: 16 }}>
              <Button type="primary" htmlType="submit">
                Submit
              </Button>
            </Form.Item>
          </Form>
          <div className="error_response">{errorResponse}</div>
          <div className="notification">{notification}</div>
        </div>
      </main>
    </>
  );
};

export default SignUp;
